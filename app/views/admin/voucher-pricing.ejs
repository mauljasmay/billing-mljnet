<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kelola Harga Voucher - Gembok Bill</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" rel="stylesheet">
    <!-- Admin Mobile Optimizations -->
    <link href="/css/admin-mobile.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
        }
        .pricing-card {
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            background: #fff;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .pricing-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 30px;
        }
        .profit-badge {
            background: #28a745;
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.8em;
        }
        .agent-price {
            color: #007bff;
            font-weight: bold;
        }
        .customer-price {
            color: #28a745;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <!-- Navigation Bar -->
    <nav class="navbar navbar-expand-lg navbar-dark" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
        <div class="container-fluid">
            <a class="navbar-brand" href="/admin/agents">
                <i class="bi bi-arrow-left me-2"></i>Kembali ke Agent
            </a>
            <div class="navbar-nav ms-auto">
                <a class="nav-link" href="/admin/logout">
                    <i class="bi bi-box-arrow-right"></i> Logout
                </a>
            </div>
        </div>
    </nav>
    
    <div class="container-fluid mt-4">
        <!-- Alert Container -->
        <div id="alertContainer"></div>
        
        <div class="pricing-header">
            <h2><i class="bi bi-currency-dollar"></i> Kelola Harga Voucher</h2>
            <p class="mb-0">Atur harga voucher customer dan harga agent</p>
        </div>

        <!-- Add New Pricing Button -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h4>Daftar Harga Voucher</h4>
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addPricingModal">
                <i class="bi bi-plus-circle"></i> Tambah Harga Voucher
            </button>
        </div>

        <!-- Pricing Cards -->
        <div id="pricingList">
            <!-- Pricing cards will be loaded here -->
        </div>

        <!-- Add/Edit Pricing Modal -->
        <div class="modal fade" id="addPricingModal" tabindex="-1">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="modalTitle">Tambah Harga Voucher</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <form id="pricingForm">
                        <div class="modal-body">
                            <input type="hidden" id="pricingId" name="id">
                            
                            <div class="row">
                                <div class="col-md-6">
                        <div class="mb-3">
                            <label for="packageName" class="form-label">Nama Paket</label>
                            <input type="text" class="form-control" id="packageName" name="packageName" required>
                        </div>
                        <div class="mb-3">
                            <label for="accountType" class="form-label">Tipe Akun</label>
                            <select class="form-select" id="accountType" name="accountType" required>
                                <option value="voucher">VOUCHER</option>
                                <option value="member">MEMBER</option>
                            </select>
                            <div class="form-text">
                                <strong>VOUCHER:</strong> Username dan password sama<br>
                                <strong>MEMBER:</strong> Username dan password berbeda
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="hotspotProfile" class="form-label">Profile Hotspot</label>
                            <select class="form-select" id="hotspotProfile" name="hotspotProfile" required>
                                <option value="">Pilih Profile Hotspot...</option>
                            </select>
                            <div class="form-text">Profile hotspot akan diambil langsung dari Mikrotik</div>
                        </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="durationType" class="form-label">Tipe Durasi</label>
                                        <select class="form-select" id="durationType" name="durationType" required>
                                            <option value="hours">Jam</option>
                                            <option value="days">Hari</option>
                                        </select>
                                        <div class="form-text">Pilih satuan durasi</div>
                                    </div>
                                    <div class="mb-3">
                                        <label for="duration" class="form-label" id="durationLabel">Durasi (Jam)</label>
                                        <input type="number" class="form-control" id="duration" name="duration" value="24" required>
                                        <div class="form-text" id="durationHelp">Masukkan durasi dalam jam</div>
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label for="customerPrice" class="form-label">Harga Jual (Customer)</label>
                                        <div class="input-group">
                                            <span class="input-group-text">Rp</span>
                                            <input type="number" class="form-control" id="customerPrice" name="customerPrice" required>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label for="agentPrice" class="form-label">Harga Agent</label>
                                        <div class="input-group">
                                            <span class="input-group-text">Rp</span>
                                            <input type="number" class="form-control" id="agentPrice" name="agentPrice" required>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label for="profitAmount" class="form-label">Keuntungan Agent (Otomatis)</label>
                                        <div class="input-group">
                                            <span class="input-group-text">Rp</span>
                                            <input type="number" class="form-control" id="profitAmount" name="profitAmount" readonly>
                                        </div>
                                        <small class="text-muted">Selisih harga customer - harga agent</small>
                                    </div>
                                </div>
                            </div>

                            <!-- Voucher Digit Settings -->
                            <div class="card mb-3">
                                <div class="card-header">
                                    <h6 class="mb-0">Pengaturan Digit Voucher</h6>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label for="voucherDigitType" class="form-label">Jenis Karakter</label>
                                                <select class="form-select" id="voucherDigitType" name="voucherDigitType" required>
                                                    <option value="mixed">Angka dan Huruf (Campuran)</option>
                                                    <option value="numbers">Angka Saja</option>
                                                    <option value="letters">Huruf Saja</option>
                                                </select>
                                                <div class="form-text">Pilih jenis karakter untuk kode voucher</div>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label for="voucherLength" class="form-label">Panjang Karakter</label>
                                                <select class="form-select" id="voucherLength" name="voucherLength" required>
                                                    <option value="3">3 Karakter</option>
                                                    <option value="4">4 Karakter</option>
                                                    <option value="5">5 Karakter</option>
                                                    <option value="6">6 Karakter</option>
                                                    <option value="7">7 Karakter</option>
                                                    <option value="8" selected>8 Karakter</option>
                                                    <option value="custom">Input Manual</option>
                                                </select>
                                                <div class="form-text">Pilih panjang kode voucher</div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row" id="customLengthRow" style="display: none;">
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label for="customLength" class="form-label">Panjang Manual</label>
                                                <input type="number" class="form-control" id="customLength" name="customLength" min="3" max="20" placeholder="Masukkan panjang (3-20)">
                                                <div class="form-text">Masukkan panjang kode voucher (3-20 karakter)</div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Preview Kode Voucher:</label>
                                        <div class="alert alert-info" id="voucherPreview">
                                            <strong>Contoh:</strong> <span id="previewCode">VMG1OQBK</span>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="description" class="form-label">Deskripsi</label>
                                <textarea class="form-control" id="description" name="description" rows="3"></textarea>
                            </div>

                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="isActive" name="isActive" checked>
                                <label class="form-check-label" for="isActive">
                                    Aktif
                                </label>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Batal</button>
                            <button type="submit" class="btn btn-primary">Simpan</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Load pricing data
        function loadPricingData() {
            fetch('/admin/voucher-pricing/api/list')
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    const container = document.getElementById('pricingList');
                    if (!container) {
                        console.error('Pricing list container not found');
                        return;
                    }
                    
                    container.innerHTML = '';
                    
                    if (data && Array.isArray(data)) {
                        data.forEach(pricing => {
                            const card = createPricingCard(pricing);
                            container.appendChild(card);
                        });
                    } else {
                        console.warn('No pricing data received or invalid format');
                    }
                })
                .catch(error => {
                    console.error('Error loading pricing data:', error);
                    showAlert('Gagal memuat data harga voucher: ' + error.message, 'danger');
                });
        }

        // Load hotspot profiles
        function loadHotspotProfiles() {
            fetch('/admin/voucher-pricing/api/hotspot-profiles')
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    const select = document.getElementById('hotspotProfile');
                    if (!select) {
                        console.error('Hotspot profile select not found');
                        return;
                    }
                    
                    // Clear existing options except the first one
                    select.innerHTML = '<option value="">Pilih Profile Hotspot...</option>';
                    
                    if (data.success && data.profiles && Array.isArray(data.profiles)) {
                        data.profiles.forEach(profile => {
                            const option = document.createElement('option');
                            option.value = profile.name;
                            option.textContent = `${profile.name} (${profile.timeLimit || 'Unlimited'})`;
                            select.appendChild(option);
                        });
                    } else {
                        console.warn('No hotspot profiles received or invalid format');
                        const option = document.createElement('option');
                        option.value = '';
                        option.textContent = 'Tidak ada profile hotspot tersedia';
                        option.disabled = true;
                        select.appendChild(option);
                    }
                })
                .catch(error => {
                    console.error('Error loading hotspot profiles:', error);
                    const select = document.getElementById('hotspotProfile');
                    if (select) {
                        select.innerHTML = '<option value="">Error memuat profile hotspot</option>';
                    }
                    showAlert('Gagal memuat daftar profile hotspot: ' + error.message, 'warning');
                });
        }

        // Create pricing card
        function createPricingCard(pricing) {
            const card = document.createElement('div');
            card.className = 'pricing-card';
            
            // Format duration display
            const durationType = pricing.duration_type || 'hours';
            const durationText = durationType === 'days' ? `${pricing.duration} hari` : `${pricing.duration} jam`;
            
            // Format account type display
            const accountTypeText = pricing.account_type === 'member' ? 'MEMBER' : 'VOUCHER';
            const accountTypeClass = pricing.account_type === 'member' ? 'bg-info' : 'bg-primary';
            
            card.innerHTML = `
                <div class="row align-items-center">
                    <div class="col-md-3">
                        <h5 class="mb-1">${pricing.package_name}</h5>
                        <small class="text-muted">${durationText}</small>
                        <div class="mt-1">
                            <span class="badge ${accountTypeClass}">${accountTypeText}</span>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="customer-price">Rp ${pricing.customer_price.toLocaleString('id-ID')}</div>
                        <small class="text-muted">Harga Jual</small>
                    </div>
                    <div class="col-md-2">
                        <div class="agent-price">Rp ${pricing.agent_price.toLocaleString('id-ID')}</div>
                        <small class="text-muted">Harga Agent</small>
                    </div>
                    <div class="col-md-2">
                        <span class="profit-badge">Rp ${(pricing.customer_price - pricing.agent_price).toLocaleString('id-ID')}</span>
                        <small class="text-muted d-block">Keuntungan</small>
                    </div>
                    <div class="col-md-2">
                        <span class="badge ${pricing.is_active ? 'bg-success' : 'bg-secondary'}">
                            ${pricing.is_active ? 'Aktif' : 'Nonaktif'}
                        </span>
                    </div>
                    <div class="col-md-1">
                        <div class="btn-group">
                            <button class="btn btn-sm btn-outline-primary" onclick="editPricing(${pricing.id})">
                                <i class="bi bi-pencil"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-danger" onclick="deletePricing(${pricing.id})">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </div>
                </div>
                ${pricing.hotspot_profile ? `<div class="mt-2"><small class="text-muted"><strong>Profile:</strong> <span class="badge bg-info">${pricing.hotspot_profile}</span></small></div>` : ''}
                ${pricing.description ? `<div class="mt-2"><small class="text-muted">${pricing.description}</small></div>` : ''}
            `;
            return card;
        }

        // Calculate profit automatically
        function calculateProfit() {
            const customerPrice = parseFloat(document.getElementById('customerPrice').value) || 0;
            const agentPrice = parseFloat(document.getElementById('agentPrice').value) || 0;
            const profit = customerPrice - agentPrice;
            document.getElementById('profitAmount').value = profit;
        }

        // Edit pricing
        function editPricing(id) {
            fetch(`/admin/voucher-pricing/api/get/${id}`)
                .then(response => response.json())
                .then(data => {
                    document.getElementById('modalTitle').textContent = 'Edit Harga Voucher';
                    document.getElementById('pricingId').value = data.id;
                    document.getElementById('packageName').value = data.package_name;
                    document.getElementById('accountType').value = data.account_type || 'voucher';
                    document.getElementById('hotspotProfile').value = data.hotspot_profile || '';
                    document.getElementById('durationType').value = data.duration_type || 'hours';
                    document.getElementById('duration').value = data.duration;
                    document.getElementById('customerPrice').value = data.customer_price;
                    document.getElementById('agentPrice').value = data.agent_price;
                    document.getElementById('profitAmount').value = data.customer_price - data.agent_price;
                    document.getElementById('description').value = data.description || '';
                    document.getElementById('isActive').checked = data.is_active;
                    
                    // Update voucher digit settings
                    if (data.voucher_digit_type) {
                        document.getElementById('voucherDigitType').value = data.voucher_digit_type;
                    }
                    if (data.voucher_length) {
                        if (data.voucher_length >= 3 && data.voucher_length <= 8) {
                            document.getElementById('voucherLength').value = data.voucher_length;
                        } else {
                            document.getElementById('voucherLength').value = 'custom';
                            document.getElementById('customLength').value = data.voucher_length;
                            document.getElementById('customLengthRow').style.display = 'block';
                        }
                    }
                    
                    // Update duration label based on duration type
                    const durationType = data.duration_type || 'hours';
                    const durationLabel = document.getElementById('durationLabel');
                    const durationHelp = document.getElementById('durationHelp');
                    if (durationType === 'days') {
                        durationLabel.textContent = 'Durasi (Hari)';
                        durationHelp.textContent = 'Masukkan durasi dalam hari';
                    } else {
                        durationLabel.textContent = 'Durasi (Jam)';
                        durationHelp.textContent = 'Masukkan durasi dalam jam';
                    }
                    
                    new bootstrap.Modal(document.getElementById('addPricingModal')).show();
                })
                .catch(error => {
                    console.error('Error loading pricing data:', error);
                    showAlert('Gagal memuat data harga voucher', 'danger');
                });
        }

        // Delete pricing
        function deletePricing(id) {
            if (confirm('Apakah Anda yakin ingin menghapus harga voucher ini?')) {
                fetch(`/admin/voucher-pricing/api/delete/${id}`, { method: 'DELETE' })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            showAlert('Harga voucher berhasil dihapus', 'success');
                            loadPricingData();
                        } else {
                            showAlert('Gagal menghapus harga voucher', 'danger');
                        }
                    })
                    .catch(error => {
                        console.error('Error deleting pricing:', error);
                        showAlert('Gagal menghapus harga voucher', 'danger');
                    });
            }
        }

        // Show alert
        function showAlert(message, type) {
            const alertContainer = document.getElementById('alertContainer');
            if (!alertContainer) {
                console.error('Alert container not found');
                return;
            }
            
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            alertContainer.appendChild(alertDiv);
            
            setTimeout(() => {
                if (alertDiv.parentNode) {
                    alertDiv.remove();
                }
            }, 5000);
        }

        // Form submission
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('pricingForm');
            if (form) {
                form.addEventListener('submit', function(e) {
                    e.preventDefault();
                    
                    const formData = new FormData(this);
                    const data = Object.fromEntries(formData);
                    
                    // Handle voucher length
                    if (data.voucherLength === 'custom') {
                        data.voucherLength = data.customLength || 8;
                    }
                    
                    const url = data.id ? `/admin/voucher-pricing/api/update/${data.id}` : '/admin/voucher-pricing/api/create';
                    const method = data.id ? 'PUT' : 'POST';
                    
                    fetch(url, {
                        method: method,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data)
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(result => {
                        if (result.success) {
                            showAlert('Harga voucher berhasil disimpan', 'success');
                            const modal = bootstrap.Modal.getInstance(document.getElementById('addPricingModal'));
                            if (modal) {
                                modal.hide();
                            }
                            loadPricingData();
                            document.getElementById('pricingForm').reset();
                        } else {
                            showAlert('Gagal menyimpan harga voucher: ' + (result.message || 'Unknown error'), 'danger');
                        }
                    })
                    .catch(error => {
                        console.error('Error saving pricing:', error);
                        showAlert('Gagal menyimpan harga voucher: ' + error.message, 'danger');
                    });
                });
            }
        });

        // Generate voucher preview
        function generateVoucherPreview() {
            const digitType = document.getElementById('voucherDigitType').value;
            const lengthSelect = document.getElementById('voucherLength').value;
            const customLength = document.getElementById('customLength').value;
            
            let length = 8; // default
            if (lengthSelect === 'custom') {
                length = parseInt(customLength) || 8;
            } else {
                length = parseInt(lengthSelect) || 8;
            }
            
            // Generate sample voucher code
            let chars = '';
            switch (digitType) {
                case 'numbers':
                    chars = '0123456789';
                    break;
                case 'letters':
                    chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
                    break;
                case 'mixed':
                default:
                    chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
                    break;
            }
            
            let result = '';
            for (let i = 0; i < length; i++) {
                result += chars.charAt(Math.floor(Math.random() * chars.length));
            }
            
            return result;
        }
        
        // Update voucher preview
        function updateVoucherPreview() {
            const previewCode = document.getElementById('previewCode');
            if (previewCode) {
                previewCode.textContent = generateVoucherPreview();
            }
        }
        
        // Show/hide custom length input
        function toggleCustomLength() {
            const lengthSelect = document.getElementById('voucherLength').value;
            const customRow = document.getElementById('customLengthRow');
            if (lengthSelect === 'custom') {
                customRow.style.display = 'block';
            } else {
                customRow.style.display = 'none';
            }
        }

        // Event listeners
        document.addEventListener('DOMContentLoaded', function() {
            const customerPrice = document.getElementById('customerPrice');
            const agentPrice = document.getElementById('agentPrice');
            const modal = document.getElementById('addPricingModal');
            const durationType = document.getElementById('durationType');
            const durationLabel = document.getElementById('durationLabel');
            const durationHelp = document.getElementById('durationHelp');
            const durationInput = document.getElementById('duration');
            
            if (customerPrice) {
                customerPrice.addEventListener('input', calculateProfit);
            }
            if (agentPrice) {
                agentPrice.addEventListener('input', calculateProfit);
            }
            
            // Duration type change handler
            if (durationType && durationLabel && durationHelp && durationInput) {
                durationType.addEventListener('change', function() {
                    const selectedType = this.value;
                    if (selectedType === 'days') {
                        durationLabel.textContent = 'Durasi (Hari)';
                        durationHelp.textContent = 'Masukkan durasi dalam hari';
                        durationInput.value = '1'; // Default 1 hari
                        durationInput.min = '1';
                    } else {
                        durationLabel.textContent = 'Durasi (Jam)';
                        durationHelp.textContent = 'Masukkan durasi dalam jam';
                        durationInput.value = '24'; // Default 24 jam
                        durationInput.min = '1';
                    }
                });
            }
            
            // Voucher digit settings event listeners
            const voucherDigitType = document.getElementById('voucherDigitType');
            const voucherLength = document.getElementById('voucherLength');
            const customLength = document.getElementById('customLength');
            
            if (voucherDigitType) {
                voucherDigitType.addEventListener('change', updateVoucherPreview);
            }
            if (voucherLength) {
                voucherLength.addEventListener('change', function() {
                    toggleCustomLength();
                    updateVoucherPreview();
                });
            }
            if (customLength) {
                customLength.addEventListener('input', updateVoucherPreview);
            }
            
            // Initial preview update
            updateVoucherPreview();
            
            if (modal) {
                modal.addEventListener('hidden.bs.modal', function() {
                    const form = document.getElementById('pricingForm');
                    const modalTitle = document.getElementById('modalTitle');
                    const pricingId = document.getElementById('pricingId');
                    const hotspotProfile = document.getElementById('hotspotProfile');
                    
                    if (form) form.reset();
                    if (modalTitle) modalTitle.textContent = 'Tambah Harga Voucher';
                    if (pricingId) pricingId.value = '';
                    if (hotspotProfile) hotspotProfile.value = '';
                });
            }
            
            // Load data on page load
            loadPricingData();
            loadHotspotProfiles();
        });
    </script>
    </div>
</body>
</html>
